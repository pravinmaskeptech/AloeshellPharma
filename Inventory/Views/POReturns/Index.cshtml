@model IEnumerable<Inventory.Models.POReturns>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";}
<h4><b>PO RETURN / REPLACEMENT</b></h4>
<style>
    .e-grid .e-headercell, .e-grid .e-grouptopleftcell {
       background-color: #3c8dbc;
        border-top-color: #3c8dbc;
        border-left-color: #3c8dbc;
        border-bottom-color: #3c8dbc;
        color: #fff;
    }

    .e-grid .e-gridheader .e-icon {
        color: #fff;
    }

    .Expand {
        background-position: -180px 3px;
    }

    .Collapse {
        background-position: -205px 3px;
    }

    .refresh {
        background-position: -76px 3px;
    }

    .e-toolbaricons {
        background-image: url("../../Content/ej/web/common-images/icons-gray.png");
    }

    .Expand:hover, .Collapse:hover, .refresh:hover {
        background-image: url("../../Content/ej/web/common-images/icons-white.png");
    }
</style>
<div class="box-body">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12 col-xs-12">
                @(Html.EJ().Grid<Inventory.Models.POReturns>
                    ("POReturns").Datasource((IEnumerable<object>
                        )ViewBag.datasource)
                        .AllowScrolling()
                        .AllowFiltering()
                        .AllowTextWrap()
                        .FilterSettings(filter => { filter.ShowFilterBarStatus().StatusBarWidth(500).FilterBarMode(FilterBarMode.Immediate).MaxFilterChoices(1000).FilterType(FilterType.Menu); })   /*Filtering Enabled*/
                        .AllowSorting()    /*Sorting Enabled*/
                        .AllowMultiSorting()
                        .AllowPaging()    /*Paging Enabled*/
                        .SelectionType(SelectionType.Multiple)
                        .AllowResizing()
                        .IsResponsive()
                        .MinWidth(1000)
                        .AllowReordering()
                        .AllowResizeToFit()
                        .AllowResizing()
                        .ScrollSettings(scroll => { scroll.Height(300); })
                        .ToolbarSettings(toolbar =>
                        {
                            toolbar.ShowToolbar().ToolbarItems(items =>
                            {
                                items.AddTool(ToolBarItems.Search); items.AddTool(ToolBarItems.ExcelExport);
                            });
                        })
                                .Mappers(map => map.ExportToExcelAction("/POReturns/ExportToExcel"))
                        .AllowSearching(true)
                        .ToolbarSettings(toolbar =>
                        {
                            toolbar.ShowToolbar(true).CustomToolbarItems(new List<object>
                                () { new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Refresh" }, new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#AddNew" } });
                        })
                                    .ClientSideEvents(eve => { eve.ToolbarClick("onToolBarClick").ActionComplete("Complete"); })
                            .Columns(col =>
                            {
                                col.HeaderText("").Template("<input type='Button' class='btn btn-sm btn-warning' id='LetterGeneration' Value='View Details' onclick='F1();' /></a> ").AllowFiltering(false).Width(100).Add();
                                col.Field("GrnNo").HeaderText("GRN No").TextAlign(TextAlign.Left).Visible(true).Width(90).Add();
                                col.Field("SupplierName").HeaderText("Supplier Name").IsPrimaryKey(true).TextAlign(TextAlign.Left).Width(110).Add();
                                col.Field("ReturnQty").HeaderText("Return Qty").IsPrimaryKey(true).TextAlign(TextAlign.Left).Width(100).Add();
                                //col.Field("ReturnDate").HeaderText("Return Date").TextAlign(TextAlign.Left).Visible(true).Width(110).Format("{0:dd/MM/yyyy}").Add();
                                col.Field("ReturnBy").HeaderText("Return By").TextAlign(TextAlign.Left).Width(120).Add();
                            }).ClientSideEvents(evt => evt.RowSelected("onRowSelected")))
            </div>
        </div>
    </div>
    <div class="modal fade" id="OfferLetterGeneration">
        <div class="modal-dialog" style="width:68%; margin-top:100px;">
            <div class="modal-content">
                <input type="hidden" id="BatchSetting" name="BatchSetting" value="@ViewBag.BatchNoSetting" />
                <div class="modal-header" style="background-color:#367fa9; color:white">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">PO Return Details</h4>
                </div>
                <div class="modal-body">
                    <form method="post" id="form1" class="form-horizontal" data-bv-message="This value is not valid" data-toggle="validator" data-bv-feedbackicons-valid="glyphicon glyphicon-ok" data-bv-feedbackicons-invalid="glyphicon glyphicon-remove" data-bv-feedbackicons-validating="glyphicon glyphicon-refresh">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-md-3">
                                    <label class="control-label">GRN No</label>
                                </div>
                                <div class="col-md-3">
                                    <input type="text" id="GRNNo" class="form-control" disabled="disabled" required="required" autocomplete="off" maxlength="100" />
                                </div>
                                <div class="col-md-3">
                                    <label class="control-label">Supplier Name</label>
                                </div>
                                <div class="col-md-3">
                                    <input type="text" id="SupplierName" class="form-control" required="required" disabled="disabled" autocomplete="off" maxlength="100" />
                                </div>
                            </div>

                        </div>
                    </form>
                </div>
                <div id="orderItems">
                    <table class="table table-responsive" id="orderdetailsItems" display block; overflow-x auto; white-space nowrap; style="width:780px"></table>
                    <span id="orderItemError" style="color:red"></span>
                </div>
            </div>

            <style>
                span.error {
                    display: block;
                    visibility: hidden;
                    color: red;
                    font-size: 60%;
                }

                tr.error {
                    background-color: rgba(255,0,0,0.35);
                }
            </style>
        </div>
    </div>
</div>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script id="Refresh" type="text/x-jsrender">
    <a href="#" class="e-toolbaricons refresh" />
</script>
<script id="AddNew" type="text/x-jsrender">
    <button class="btn btn-primary btn-sm add" id="btnBatch">Return By Batch No</button>
   <input type="button"id="btnReturn" value="Return By Serial No"class="btn btn-primary" onclick="test()">
</script>

<script type="text/javascript">
    $(document).ready(function () {
        var Message = '@TempData["Msg"]';
        if (Message != "")
            toastr.error(Message);
        var tanId = '@TempData["Temp"]';
        if (tanId != "" && tanId != undefined && tanId != null) {
            toastr.success(tanId);
        }        
    });

    function Complete(sender) {
        
        var BatchSetting = $("#BatchSetting").val();
        if (BatchSetting == "BatchNo") {

        }
        else {
            $("#btnBatch").css("display", "none");
        }
    }
</script>
<script type="text/javascript">
    function onToolBarClick(sender) {
        if (sender.itemName == "Expand")
            this.expandAll();
        else if (sender.itemName == "Collapse")
            this.collapseAll();
        else if (sender.itemName == "Refresh") {
            var instance = $("#POReturns").ejGrid("instance");
            instance._filterCollection = [];
            instance.clearFiltering();
            instance.clearSearching();
            this.refreshContent();
        }
        if (sender.itemName == "AddNew") {
            window.location.href = "../POReturns/Create";
        }
        if (sender.itemName == "ReturnBySerialNo") {
            window.location.href = "../POReturns/Return";
        }
    }
</script>
<script>
    function test()
    {
        window.location.href = "/POReturns/Return";
    }
    function F1() {
        $('#OfferLetterGeneration').modal({ backdrop: 'static', keyboard: false })
        $("#OfferLetterGeneration").modal("show");
        $("#orderdetailsItems tr").remove();
    }
    function onRowSelected(args) {
        
        $('#TotAmt').val(0);
        var result = this.getSelectedRecords();
        $('#GRNNo').val(result[0].GrnNo);
        $('#SupplierName').val(result[0].SupplierName);

        $("#pnlShipperFreeze").show();
        $.ajax({
            type: "GET",
            url: '/POReturns/GetAllPODetails',
            data: { 'GRNNo': $('#GRNNo').val() },
            success: function (result) {
                var ResultCount = result.length;                
                if (ResultCount != 0) {
                    var BatchSetting = $("#BatchSetting").val();
                    $(" <tbody> <tr bgcolor='#3c8dbc' style='color: #FBF8F7' > <th>ITEM NAME</th>" + (BatchSetting == "BatchNo" ? '<th>BATCH NO</th>' : '') + " <th>SERIAL NO</th> <th>RETURN QTY</th><th>STATUS</th><th> RERURN REASON</th> </tr> <tbody>").appendTo("#orderdetailsItems");
                    var Count = 1;
                    $.each(result, function (i, item) {
                        $(" <tbody> <tr id='R" + Count + "'>      <td> <input type='text' id='product" + Count + "' readonly  style='width : 140px' class='product form-control'' /></td>" + (BatchSetting=="BatchNo"?'<td><input type="text"  id="BatchNo'+ Count + '" style="width : 110px" readonly class="BatchNo form-control" /></td>':'') + "<td><input type='text' id='SerialNumber" + Count + "' readonly style='width : 110px' class='SerialNumber form-control'' /></td>    <td><input type='text' id='ReturnQty" + Count + "' style='width : 110px' readonly class='ReturnQty form-control'' /></td>  <td><input type='text'  id='Status" + Count + "' style='width : 110px' readonly class='Status form-control'' /></td>    <td><input type='text' id='ReturnReason" + Count + "'  style='width : 200px' readonly  class='ReturnReason  form-control'' /></td>          </tr> <tbody>").appendTo("#orderdetailsItems");
                        $("#product" + Count + "").val(result[i].ProductCode);
                        $("#SerialNumber" + Count + "").val(result[i].SerialNumber);
                        $("#BatchNo" + Count + "").val(result[i].BatchNo);
                        $("#ReturnQty" + Count + "").val(result[i].ReturnQty);
                        $("#ReturnReason" + Count + "").val(result[i].ReturnReason);
                        //var date = new Date(parseInt(result[i].ManufacturingDate.substr(6)));
                        //var ManufacturingDate = $.datepicker.formatDate("dd/MM/yyyy", date);
                        //$("#ManufacturingDate" + Count + "").val(ManufacturingDate);

                        //var date1 = new Date(parseInt(result[i].ExpiryDate.substr(6)));
                        //var ExpiryDate = $.datepicker.formatDate("dd/MM/yyyy", date1);
                        //$("#ExpiryDate" + Count + "").val(ExpiryDate);

                        $("#Status" + Count + "").val(result[i].Status);
                        //$("#SalesQty" + Count + "").val(result[i].SalesQty);

                        Count = Count + 1;
                    });
                } else {
                    toastr.warning('NO data Found...');
                    $('#orderdetailsItems').empty();
                }
            }
        })
    }
</script>
