@model IEnumerable<Inventory.Models.DebitNote>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h4><b>DEBIT NOTE</b></h4>

<style>
    .e-grid .e-headercell, .e-grid .e-grouptopleftcell {
        background-color: #3c8dbc;
        border-top-color: #3c8dbc;
        border-left-color: #3c8dbc;
        border-bottom-color: #3c8dbc;
        color: #fff;
    }

    .e-grid .e-gridheader .e-icon {
        color: #fff;
    }

    .Expand {
        background-position: -180px 3px;
    }

    .Collapse {
        background-position: -205px 3px;
    }

    .refresh {
        background-position: -76px 3px;
    }

    .e-toolbaricons {
        background-image: url("../../Content/ej/web/common-images/icons-gray.png");
    }

    .Expand:hover, .Collapse:hover, .refresh:hover {
        background-image: url("../../Content/ej/web/common-images/icons-white.png");
    }
</style>

<div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12 col-xs-12">
                @(Html.EJ().Grid<Inventory.Models.DebitNote>
                                    ("DebitNote").Datasource((IEnumerable<object>
                        )ViewBag.datasource)
                        .AllowScrolling()
                        .AllowFiltering()
                        .AllowTextWrap()
                        .FilterSettings(filter => { filter.ShowFilterBarStatus().StatusBarWidth(500).FilterBarMode(FilterBarMode.Immediate).MaxFilterChoices(1000).FilterType(FilterType.Menu); })   /*Filtering Enabled*/
                        .AllowSorting()    /*Sorting Enabled*/
                        .AllowMultiSorting()
                        .AllowPaging()    /*Paging Enabled*/
                        .SelectionType(SelectionType.Multiple)
                        .AllowResizing()
                        .IsResponsive()
                        .MinWidth(1000)
                        .AllowReordering()
                        .AllowResizeToFit()
                        .AllowResizing()
                        .ScrollSettings(scroll => { scroll.Height(300); })
                        .ToolbarSettings(toolbar =>
                        {
                            toolbar.ShowToolbar().ToolbarItems(items =>
                            {
                                items.AddTool(ToolBarItems.Search); items.AddTool(ToolBarItems.ExcelExport);
                            });
                        })
                                                .Mappers(map => map.ExportToExcelAction("/DebitNote/ExportToExcel"))
                        .AllowSearching(true)
                        .ToolbarSettings(toolbar =>
                        {
                            toolbar.ShowToolbar(true).CustomToolbarItems(new List<object>
                                () { new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Refresh" } });
                        })
                            .ClientSideEvents(eve => { eve.ToolbarClick("onToolBarClick").ActionBegin("GetDataForCompID"); })
                            .Columns(col =>
                            {
                                //PONO=GRN.PONo, PODate=po.PurchaseOrderDate, ProductName=Product.ProductName
                                col.HeaderText("").Template("<input type='Button' class='btn btn-sm btn-warning' id='{{:GRNId}}' Value='Print' onclick='CreateInvoice(this.id);' /></a> ").AllowFiltering(false).Width(100).Add();
                                col.HeaderText("").Template("<a href='/DebitNote/Detail/{{:PONO}}'><input type='Button' class='btn btn-sm btn-primary' id='Btn{{:PONO}}' Value='Debit Note' /></a> ").AllowFiltering(false).Width(70).Add();
                                col.Field("PONO").HeaderText("PO NO").TextAlign(TextAlign.Left).Visible(true).Width(110).Add();
                                col.Field("SupplierName").HeaderText("Supplier Name").TextAlign(TextAlign.Left).Visible(true).Width(110).Add();
                                col.Field("PODate").HeaderText("PO Date").IsPrimaryKey(true).Format("{0:dd/MM/yyyy}").TextAlign(TextAlign.Left).Width(110).Add();
                                col.Field("TotalQty").HeaderText("Return Items").TextAlign(TextAlign.Left).Visible(true).Width(160).Add();
                                col.Field("TotAmount").HeaderText("Value").TextAlign(TextAlign.Left).Visible(true).Width(160).Add();
                                //col.HeaderText("").Template("<a href='/DebitNote/Detail/{{:PONO}}'><input type='Button' class='btn btn-sm btn-primary' id='Button1' Value='Debit Note' /></a> ").AllowFiltering(false).Width(70).Add();
                            }))
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script id="Refresh" type="text/x-jsrender">
    <a href="#" class="e-toolbaricons refresh" />
</script>
@*<script id="AddNew" type="text/x-jsrender">
        <button class="btn btn-primary btn-sm add">Add Product</button>
    </script>*@
<script type="text/javascript">
    $(document).ready(function () {
        var Message = '@TempData["Msg"]';
        if (Message != "")
            toastr.error(Message);

           var tanId = '@TempData["Temp"]';
       if (tanId != "" && tanId != undefined && tanId != null) {
           toastr.success(tanId);
       }
       });
</script>

<script type="text/javascript">
    function onToolBarClick(sender) {
        if (sender.itemName == "Expand")
            this.expandAll();
        else if (sender.itemName == "Collapse")
            this.collapseAll();
        else if (sender.itemName == "Refresh") {
            var instance = $("#Products").ejGrid("instance");
            instance._filterCollection = [];
            instance.clearFiltering();
            instance.clearSearching();
            this.refreshContent();
        }
        if (sender.itemName == "AddNew") {
            window.location.href = "../DebitNote/Create";
        }
    }
    document.addEventListener('contextmenu', function (e) {
        e.preventDefault();
    });


     function GetDataForCompID() {
    debugger;
    $.ajax({
        url: '@Url.Action("GetDataFromGRNDetails", "DebitNote")',
        type: "GET",
        dataType: "JSON",
        success: function (result) {
            debugger;
            $.each(result, function (index, item) {
                /*if (item.CompanyID == 1) {*/
                    $("#Btn" + item.PONo).removeClass("btn-primary").addClass("btn-warning").val("View");
               /* }*/
            });
        },
    });
    }

    function CreateInvoice(ID) {
        debugger
        $.ajax({
            url: '/DebitNote/PrintDebitNote',
            type: "GET",
            data: { id: ID },
            success: function (result) {
                if (result.Message == "success") {
                    try {
                        window.open('/DebitNote/GetReport', '_blank');

                        if (result != null) {
                            toastr.success("Created Successfully");
                        }
                        else {
                            toastr.error(result.Message);
                        }
                    }
                    catch (e) {
                    }
                } else {
                    toastr.error(result.Message);
                };
            }
        });
    }
</script>

