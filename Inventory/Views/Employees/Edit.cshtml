@model Inventory.Models.Employee

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
 
    .iframe-container {
        padding-bottom: 60%;
        padding-top: 30px;
        height: 0;
        overflow: hidden;
    }

        .iframe-container iframe,
        .iframe-container object,
        .iframe-container embed {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
</style>
<div class="box-body">
    <div class="row" style="background-color:white">
        <div class="col-lg-12 col-sm-4 col-xs-12">
    @using (Html.BeginForm("Edit", "Employees", FormMethod.Post, new
            {
                enctype = "multipart/form-data",
                @class = "form-horizontal",
                data_bv_message = "This value is not valid",
                data_toggle = "validator",
                data_bv_feedbackicons_valid = "glyphicon glyphicon-ok",
                data_bv_feedbackicons_invalid = "glyphicon glyphicon-remove",
                data_bv_feedbackicons_validating = "glyphicon glyphicon-refresh"
            }))
            {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h3>Edit Employee</h3>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.EmployeeID)
            @Html.HiddenFor(model => model.PicturePath)
            @Html.HiddenFor(model => model.CreatedBy)
            @Html.HiddenFor(model => model.CreatedDate)
            <input type="hidden" id="BirthDate" name="BirthDate" value="" />
            <input type="hidden" id="PreviousFile" name="PreviousFile" value=@Model.PicturePath />
            <input type="hidden" id="flag" name="flag" value="0" />
            @*<input type="file" name="ImageData" id="ImageData" onchange="fileCheck(this);" />*@
            
            <div class="row">   
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.EmployeeName, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.EmployeeName, new  { htmlAttributes = new  {  @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Employee Name is required and cannot be empty", maxlength = "100", placeholder = "Employee Name", onchange = "CheckDuplicateName();" } })
                                @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
              
                <div class="col-md-6">
                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-8">
                                <input type="text" id="DOB" name="DOB" required class="form-control" style="width:100%" autocomplete="off" data_bv_notempty="true" data_bv_notempty_message="Birth Date is required and cannot be empty" />
                                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="col-md-1">
                    <div class="col-md-12">
                        <div class="form-group">                           
                            <div class="col-md-8" style="align-content:flex-end">
                                <img src="~/Photo/EmployeePic/@Model.PicturePath" width="100" height="100" style="border:1px;border-color:black" />

                            </div>
                        </div>
                    </div>
                </div>*@
            </div>
      
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-9">
                                <textarea id="Address" name="Address" class="input-validation-error form-control" cols="40" data-val="true" data-val-required="The Message field is required." placeholder="Address" rows="2" required data-bv-notempty-message="Address is required and cannot be empty" maxlength="200"></textarea>
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.City, new {htmlAttributes = new{@class = "form-control",Autocomplete = "off",data_bv_notempty = "true",data_bv_notempty_message = "City is required and cannot be empty",maxlength = "50",placeholder = "City"}})
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                               @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control", @type = "number", data_bv_notempty = "true", data_bv_notempty_message = "The Pincode No. is required", data_bv_stringlength = "true", data_bv_stringlength_min = "6", required = "required", autocomplete = "off", data_bv_stringlength_max = "6", data_bv_stringlength_message = "The Pincode No. must be 6 digits long", data_bv_regexp = "true", data_bv_regexp_regexp = "[0-9]", data_bv_regexp_message = "The Pincode Number can only consist digit" } })
                                @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Designation, new {htmlAttributes = new{@class = "form-control",Autocomplete = "off",data_bv_notempty = "true",data_bv_notempty_message = "Designation is required and cannot be empty",maxlength = "50",placeholder = "Designation"}})
                                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", @type = "number", data_bv_notempty = "false", data_bv_stringlength = "true", data_bv_stringlength_min = "10", autocomplete = "off", data_bv_stringlength_max = "10", data_bv_stringlength_message = "The Phone No. must be 10 digits long", data_bv_regexp = "false", data_bv_regexp_regexp = "[0-9]", data_bv_regexp_message = "The Phone Number can only consist digit" } })

                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                               @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control", @type = "number", data_bv_notempty = "true", data_bv_notempty_message = "The Mobile No. is required", data_bv_stringlength = "true", data_bv_stringlength_min = "10", required = "required", autocomplete = "off", data_bv_stringlength_max = "10", data_bv_stringlength_message = "The Mobile No. must be 10 digits long", data_bv_regexp = "true", data_bv_regexp_regexp = "[0-9]", data_bv_regexp_message = "The Mobile Number can only consist digit" } })
                                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { onchange = "DuplicteBillEmail();", @class = "form-control", maxlength = "100", data_bv_regexp_message = "Input string is not valid Email Id.", @Pattern = "[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$",  data_bv_emailaddress_message = "The input is not a valid email address", data_bv_notempty = "false", Autocomplete = "off" } })
                               
                            </div>
                        </div>
                    </div>
                </div>
                @*<div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.DropDownListFor(model => model.Gender, new SelectList(ViewBag.GenderDataSource, "Text", "Text"), "Select", new { @class = "form-control", required = "required", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Gender is required and cannot be empty", maxlength = "50" })
                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>*@
            </div>
                    @*<div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.BloodGroup, htmlAttributes: new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.DropDownListFor(model => model.BloodGroup, new SelectList(ViewBag.BloodGroupDataSource, "Text", "Text"), "Select", new { @class = "form-control", required = "required", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Blood Group is required and cannot be empty", maxlength = "50" })
                                        @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.PicturePath, htmlAttributes: new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-6">
                                        <input type="file" id="UploadFilePath" name="UploadFilePath" class="btn" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>*@
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <div class="col-md-12">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label " })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.EditorFor(model => model.IsActive, new {htmlAttributes = new{@class = "form-control",Autocomplete = "off",data_bv_notempty = "true",data_bv_notempty_message = "Freeze required and cannot be empty",maxlength = "10"}})
                                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                       
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" id="edit" class="btn btn-primary" onchange="CheckDuplicateName();" onclick="FilVal(event);" />
                            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#form0").bootstrapValidator();
    })
    $(document).ready(function () {
        $("#form0").bootstrapValidator();
        
        var Message = '@TempData["Msg"]';
        if (Message != "")
            toastr.error(Message);
    })
    $(document).ready(function () {
        
        var url = window.location.href
        var array = url.split('/');
        var lastsegment = array[array.length - 1];
        
        $.ajax({
            type: "GET",
            url: "/Employees/getGenderAndBloodGroup",
            data: { 'Empid': lastsegment },
            success: function (result) {                
                $('#Gender').val(result.Gender)
                $('#BloodGroup').val(result.BloodGroup)
                $('#UploadFilePath').val(result.PicturePath)
                $('#DOB').val(result.DOB)
            },
        })
    });

    $(document).ready(function () {        
        var url = window.location.href
        var array = url.split('/');
        var lastsegment = array[array.length - 1];

        $.ajax({
            type: "GET",
            url: "/Employees/getAddress",
            data: { 'Id': lastsegment },
            success: function (Data) {
                
                $('#Address').val(Data.Address); 
                var date = new Date(parseInt(Data.DOB.substr(6)));
                var displayDate = $.datepicker.formatDate("dd/mm/yy", date);              
                $('#DOB').val(displayDate);
            },
        })
    });
    function CheckDuplicateName() {
        var Name = $('#EmployeeName').val();
        var Code = $('#EmployeeID').val();
        $.ajax({
            url: '@Url.Action("CheckDuplicateName", "Employees")',
            type: "GET",
            dataType: "JSON",
            data: { Name: Name, Mode: "Edit", Code: Code },
            success: function (result) {               
                    if (result == "1") {
                        var Code = result[0].EmployeeName;
                        if (Code != "" || Code != null) {
                            $('#EmployeeName').val('');
                            toastr.error("Employee Name already exist");
                            $("#form0").bootstrapValidator('revalidateField', 'EmployeeName');
                        }
                   else if (result == "0") {

                    }
                    else {
                        toastr.error(result);
                   }
                       
                }
                
            }
        });
    }


    $(document).ready(function () {
        $('#UploadFilePath').on('change', function (evt) {
            fs = this.files[0].size;
            fs = fs / 1048576;
            if (fs > 2) {
                $("input[type='file']").replaceWith($("input[type='file']").clone(true));
                $('#UploadFilePath').val('');
                toastr.error("Please select file less than 2MB");
                $("#form0").bootstrapValidator('revalidateField', 'UploadFilePath');
            }
        });
    });



    $('#UploadFilePath').change(function () {

        var ext = $('#UploadFilePath').val().split(".").pop().toLowerCase();
        if ($.inArray(ext, ['jpg', 'png', ]) == -1) {
            $("input[type='file']").replaceWith($("input[type='file']").clone(true));
            //$('#UploadFilePath').val('');
            toastr.error("Only jpg OR png file allowed");
            $('#UploadFilePath').val('')
            $("#form0").bootstrapValidator('revalidateField', 'UploadFilePath');
            $('#FilePar').hide();
        } else {
            // true
        }
    });
    $('.deleteItem').click(function (e) {
        
        e.preventDefault();
        var $ctrl = $(this);
        if (confirm('Do you really want to delete this file?')) {

            $ctrl.closest('li').remove();
            $('#UploadFilePath').attr('required', true);
            $('#flag').val('1');
            $("#form0").bootstrapValidator('revalidateField', 'UploadFilePath');
        }
    });
    function FilVal(event) {
        

        var flag = $('#flag').val();
        if (flag == "0") {
            return false;
        }
        else {
            var FilUp = $('#UploadFilePath').val();
            var PreviousFile = $('#PreviousFile').val();
            if (FilUp == "") {                
                toastr.error("Please Select File to upload");             
                event.preventDefault();
                return false;
            }else
            {
                $('#UploadFilePath').text(PreviousFile)

            }
        }
    }
    function CheckDuplicateEmail() {
        var Email = $('#Email').val();
        var Code = $('#EmployeeID').val();
              
        $.ajax({
            url: '@Url.Action("CheckDuplicateEmail", "Employees")',
            type: "GET",
            dataType: "JSON",
            data: { Email: Email, Mode: "Edit" ,Code :Code},
            success: function (result) {

                try {
                    if (result == "1") {
                        var Code = result[0].Email;
                        if (Code != "" || Code != null) {
                            $('#Email').val('');
                            toastr.error("Email already exist");
                            $("#form0").bootstrapValidator('revalidateField', 'Email');
                        }
                    }
                    else if (result == "0") {

                    }
                    else {
                        toastr.error(result);
                    }
                }
                catch (e) {
                }
            }
        });
    }
    $(document).ready(function () {
        $('#edit').on('click', function (evt) {
            $('#BirthDate').val($('#DOB').val());
            $('#DOB').val('02/02/1991');
        });
    });

</script>
<script type="text/javascript">   
    $("#DOB").ejDatePicker({ maxDate: new Date(), allowEdit: true, locale: "en-IN", select: "expValidate", dateFormat: "dd/MM/yyyy", enableAnimation: true });
    function expValidate(sender) {
        $("#form0").bootstrapValidator('revalidateField', 'DOB');    }
</script>

