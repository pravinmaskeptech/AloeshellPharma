@model IEnumerable<Inventory.Models.ExplodedBOM>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .ScrollStyle {
        max-height: 320px;
        overflow-x: scroll;
    }

    .e-grid .e-headercell, .e-grid .e-grouptopleftcell {
        background-color: #3c8dbc;
        border-top-color: teal;
        border-left-color: teal;
        border-bottom-color: teal;
        color: #fff;
    }

    .e-grid .e-gridheader .e-icon {
        color: #fff;
    }

    .Expand {
        background-position: -180px 3px;
    }

    .Collapse {
        background-position: -205px 3px;
    }

    .refresh {
        background-position: -76px 3px;
    }

    .e-toolbaricons {
        background-image: url("../../Content/ej/web/common-images/icons-gray.png");
    }

    .Expand:hover, .Collapse:hover, .refresh:hover {
        background-image: url("../../Content/ej/web/common-images/icons-white.png");
    }
</style>

<div class="box-body">   
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12 col-xs-12">
                @(Html.EJ().Grid<Inventory.Models.ExplodedBOM>
                                         ("ExplodedBOM").Datasource((IEnumerable<object>
                                        )ViewBag.datasource)
                                        .AllowScrolling()
                                        .AllowFiltering()
                                        .AllowTextWrap()
                                        .FilterSettings(filter => { filter.ShowFilterBarStatus().StatusBarWidth(500).FilterBarMode(FilterBarMode.Immediate).MaxFilterChoices(1000).FilterType(FilterType.Menu); })   /*Filtering Enabled*/
                                        .AllowSorting()    /*Sorting Enabled*/
                                        .AllowMultiSorting()
                                        .AllowPaging()    /*Paging Enabled*/
                                        .SelectionType(SelectionType.Multiple)
                                        .AllowResizing()
                                        .IsResponsive()
                                        .MinWidth(1000)
                                        .AllowReordering()
                                        .AllowResizeToFit()
                                        .AllowResizing()
                                        .ScrollSettings(scroll => { scroll.Height(300); })
                                        .ToolbarSettings(toolbar =>
                                        {
                                            toolbar.ShowToolbar().ToolbarItems(items =>
                                            {
                                                items.AddTool(ToolBarItems.Search); items.AddTool(ToolBarItems.ExcelExport);
                                            });
                                        })
                                                        .Mappers(map => map.ExportToExcelAction("/ExplodedBOM/ExportToExcelDetail"))
                                        .AllowSearching(true)
                                        .ToolbarSettings(toolbar =>
                                        {
                                            toolbar.ShowToolbar(true).CustomToolbarItems(new List<object>
                                                () { new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Refresh" }, new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Header" } });
                                        })
                                            .ClientSideEvents(eve => { eve.ToolbarClick("onToolBarClick"); })
                                            .Columns(col =>
                                            {
                                                col.Field("FinishGood").HeaderText("Product").IsPrimaryKey(true).TextAlign(TextAlign.Left).Visible(true).Width(100).Add();
                                                col.Field("Component").HeaderText("Component").TextAlign(TextAlign.Left).Visible(true).Width(200).EditType(EditingType.String).Add();
                                                col.Field("SubComponent").HeaderText("Sub Component").TextAlign(TextAlign.Left).Visible(true).Width(200).EditType(EditingType.String).Add();
                                            })
                                             .ClientSideEvents(evt => evt.RowSelected("onRowSelected")))
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-2">
                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/countries.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script id="Refresh" type="text/x-jsrender">
    <a href="#" class="e-toolbaricons refresh" />
</script>
<script id="Header" type="text/x-jsrender">
    <label style="color:dodgerblue;"><b>Exploded Bom Detail</b></label>
</script>
<script type="text/javascript">

    $(document).ready(function () {
        $("#form1").bootstrapValidator();       
        var Message = '@TempData["Msg"]';
        if (Message != "")
            toastr.error(Message);

        var Temp = '@TempData["Temp"]';
        if (Temp != "" && Temp != undefined && Temp != null) {
            toastr.success(Temp);
        }
    });
</script>
<script type="text/javascript">
    function onToolBarClick(sender) {
        if (sender.itemName == "Expand")
            this.expandAll();
        else if (sender.itemName == "Collapse")
            this.collapseAll();
        else if (sender.itemName == "Refresh") {
            var instance = $("#ExplodedBOM").ejGrid("instance");
            instance._filterCollection = [];
            instance.clearFiltering();
            instance.clearSearching();
            this.refreshContent();
        }
    }

</script>