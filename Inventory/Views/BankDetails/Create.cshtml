@model Inventory.Models.BankDetail

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
        textarea {
      width: 230px;
      height: 50px;
    }
        .iframe-container {
            padding-bottom: 60%;
            padding-top: 30px;
            height: 0;
            overflow: hidden;
        }

            .iframe-container iframe,
            .iframe-container object,
            .iframe-container embed {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
            }
</style>
<div class="box-body">
    <div class="row" style="background-color:white">
        <div class="col-lg-12 col-sm-12 col-xs-12">
            @using (Html.BeginForm("Create", "BankDetails", FormMethod.Post, new
            {
            enctype = "multipart/form-data",
            @class = "form-horizontal",
            data_bv_message = "This value is not valid",
            data_toggle = "validator",
            data_bv_feedbackicons_valid = "glyphicon glyphicon-ok",
            data_bv_feedbackicons_invalid = "glyphicon glyphicon-remove",
            data_bv_feedbackicons_validating = "glyphicon glyphicon-refresh"
            }))
            {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <h4>BankDetails</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <input type="hidden" id="flag" name="flag" value="0" />
                @Html.HiddenFor(model => model.CompanyID)            
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-2">
                                    @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-9">                                    
                                     @Html.EJ().Autocomplete("CompanyName").Width("100%").WatermarkText("Search Company").Datasource((IEnumerable<Inventory.Models.CompanyDetail>)ViewBag.CompanyDatasource).HighlightSearch(true).ShowPopupButton(true).AutocompleteFields(field => field.Text("CompanyName").Key("CompanyID")).ClientSideEvents(e => e.Select("GetCompId").FocusOut("CheckDuplicateCompanyName"))                                  
                                    @*@Html.DropDownList("CompanyName", new SelectList(ViewBag.CompanyDatasource, "CompanyID", "CompanyName"), "Select", new { @class = "form-control", required = "required", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Fiscal Year is required and cannot be empty", maxlength = "50",onchange= "GetCompId();CheckDuplicateCompanyName();" })*@
                                     @Html.ValidationMessageFor(model => model.CompanyID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.BankName, new  { htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "BankName is required and cannot be empty", maxlength = "100", placeholder = "Bank Name", onchange = "CheckDuplicateName();"  }})
                                    @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.Branch, new {  htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Branch is required and cannot be empty", maxlength = "50", placeholder = "Branch"  } })
                                    @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.BankAddress, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-8">
                                    <textarea id="BankAddress" name="BankAddress" class="input-validation-error form-control" cols="40" data-val="true" data-val-required="The Message field is required." placeholder="Address" rows="2" required data-bv-notempty-message="Bank Address is required and cannot be empty" maxlength="500"></textarea>
                                    @Html.ValidationMessageFor(model => model.BankAddress, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.City, new  { htmlAttributes = new {  @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "City is required and cannot be empty", maxlength = "50", placeholder = "City" } })
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-6">                                   
                                    @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control", @type = "number", data_bv_notempty = "true", data_bv_notempty_message = "The Pincode No. is required", data_bv_stringlength = "true", data_bv_stringlength_min = "6", required = "required", autocomplete = "off", data_bv_stringlength_max = "6", data_bv_stringlength_message = "The Pincode No. must be 6 digits long", data_bv_regexp = "true", data_bv_regexp_regexp = "[0-9]", data_bv_regexp_message = "The Pincode Number can only consist digit" } })
                                    @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.AccountHolderName, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.AccountHolderName, new { htmlAttributes = new { @class = "form-control",  Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Account Holder Name No is required and cannot be empty",maxlength = "100", placeholder = "Account Holder Name" } })
                                    @Html.ValidationMessageFor(model => model.AccountHolderName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.AccountNo, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.AccountNo, new  { htmlAttributes = new {  @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Account No is required and cannot be empty", maxlength = "20", placeholder = "Account No", onkeypress = "return event.charCode >= 48 && event.charCode <= 57"  } })
                                    @Html.ValidationMessageFor(model => model.AccountNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.IFSCCode, htmlAttributes: new { @class = "control-label " })
                                </div>
                                <div class="col-md-6">
                                    @Html.EditorFor(model => model.IFSCCode, new { htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "IFSC Code is required and cannot be empty", maxlength = "20", @style = "text-transform:uppercase", placeholder = "IFSC Code", @pattern = "^[A-Za-z]{4}[a-zA-Z0-9]{7}$", data_bv_regexp = "true", data_bv_regexp_message = "Enter Valid IFSC Code" } })
                                    @Html.ValidationMessageFor(model => model.IFSCCode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" id="create" value="Create" class="btn btn-primary" onclick="CheckDuplicateName();" />
                        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                    </div>
                </div>
            </div>
            }

        </div>
    </div>
</div>

<script>

    $(document).ready(function () {
        $("#form0").bootstrapValidator();
        
        var Message = '@TempData["Msg"]';
        if (Message != "")
            toastr.error(Message);
    })
    function GetCompId(id) {
        
        $('#flag').val(id.key);
        $('#CompanyID').val(id.key);

    }
    function CheckDuplicateName() {

        var Name = $('#BankName').val();
        var compId = $('#CompanyID').val();
        if (compId == "") { compId = 0; }
         $.ajax({
            url: '@Url.Action("CheckDuplicateName", "BankDetails")',
            type: "GET",
            dataType: "JSON",
            data: { Name: Name, Mode: "Create", Code: "0", compId: compId },
            success: function (result) {

                try {
                    if (result == "1") {
                        var Code = result[0].BankName;
                        if (Code != "" || Code != null) {
                            $('#BankName').val('');
                            toastr.error("Bank Name already exist");
                            $("#form0").bootstrapValidator('revalidateField', 'BankName');
                        }
                    }
                    else if (result == "0") {

                    }
                    else {
                        toastr.error(result);
                    }
                }
                catch (e) {
                }
            }
        });
    }
    
    function CheckDuplicateCompanyName(id) {
        var Name = id.value;        
        $.ajax({
            url: "/BankDetails/CheckDuplicateCompanyName",
            type: "GET",
            dataType: "JSON",
            data: { Name: Name },
            success: function (result) {

                try {
                    if (result == "1") {
                        CheckDuplicateName();                       
                    }
                    else if (result == "0") {
                        var Code = result[0].CompanyName;
                        if (Code != "" || Code != null) {
                            $('#CompanyName').val('');
                            toastr.error("Company Name Not Found");
                            $('#CompanyName').css( 'border-color', 'red');
                            $('#CompanyName').val('');
                           
                        }
                    }
                    else {
                        toastr.error(result);
                    }
                }
                catch (e) {
                }
            }
        });
    }
</script>

