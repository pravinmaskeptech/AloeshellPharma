@model IEnumerable<Inventory.Models.ProductMaster>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .e-grid .e-headercell, .e-grid .e-grouptopleftcell {
        background-color: #3c8dbc;
        border-top-color: #3c8dbc;
        border-left-color: #3c8dbc;
        border-bottom-color: #3c8dbc;
        color: #fff;
    }

    .e-grid .e-gridheader .e-icon {
        color: #fff;
    }

    .Expand {
        background-position: -180px 3px;
    }

    .Collapse {
        background-position: -205px 3px;
    }

    .refresh {
        background-position: -76px 3px;
    }

    .e-toolbaricons {
        background-image: url("../../Content/ej/web/common-images/icons-gray.png");
    }

    .Expand:hover, .Collapse:hover, .refresh:hover {
        background-image: url("../../Content/ej/web/common-images/icons-white.png");
    }
</style>

<div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12 col-xs-12">
                @(Html.EJ().Grid<Inventory.Models.ProductMaster>
                    ("Product").Datasource((IEnumerable<object>
                        )ViewBag.datasource)
                        .AllowScrolling()
                        .AllowFiltering()
                        .AllowTextWrap()
                        .FilterSettings(filter => { filter.ShowFilterBarStatus().StatusBarWidth(500).FilterBarMode(FilterBarMode.Immediate).MaxFilterChoices(1000).FilterType(FilterType.Menu); })   /*Filtering Enabled*/
                        .AllowSorting()    /*Sorting Enabled*/
                        .AllowMultiSorting()
                        .AllowPaging()    /*Paging Enabled*/
                        .SelectionType(SelectionType.Multiple)
                        .AllowResizing()
                        .IsResponsive()
                        .MinWidth(1000)
                        .PageSettings(paging => paging.PageSize(10))
                        .AllowReordering()
                        .AllowResizeToFit()
                        .AllowResizing()
                        .ScrollSettings(scroll => { scroll.Height(450); })
                        .ToolbarSettings(toolbar =>
                        {
                            toolbar.ShowToolbar().ToolbarItems(items =>
                            {
                                items.AddTool(ToolBarItems.Search); items.AddTool(ToolBarItems.ExcelExport);
                            });
                        })
                                .Mappers(map => map.ExportToExcelAction("/Product/ExportToExcel"))
                        .AllowSearching(true)
                        .ToolbarSettings(toolbar =>
                        {
                            toolbar.ShowToolbar(true).CustomToolbarItems(new List<object>
                                () { new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#Refresh" }, new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#AddNew" } });
                        })
                            .ClientSideEvents(eve => { eve.ToolbarClick("onToolBarClick"); })
                            .Columns(col =>
                            {
                                col.HeaderText("Edit").Template("<a href='/Product/Edit/{{:ProductCode}}'><input type='Button' class='btn btn-sm btn-primary' id='Button1' Value='Edit' /></a> ").AllowFiltering(false).Width(70).Add();
                                col.HeaderText("Button").Template("<a href='/Product/Delete/{{:ProductID}}'><input type='Button' class='btn btn-sm btn-danger' id='{{:ProductID}}' Value='Delete' onclick='DeleteEntry(this.id);' /></a> ").AllowFiltering(false).Width(55).Add();
                                col.Field("ProductCode").HeaderText("ProductCode").TextAlign(TextAlign.Left).Visible(true).Width(110).Add();
                                col.Field("CategoryId").HeaderText("Category").TextAlign(TextAlign.Left).Visible(true).Width(110).Add();
                                col.Field("ProductName").HeaderText("Product Name").TextAlign(TextAlign.Left).Visible(true).Width(160).Add();
                                col.Field("HSNCode").HeaderText("Hsn Code").TextAlign(TextAlign.Left).Width(120).EditType(EditingType.String).Add();

                                col.Field("IsActive").HeaderText("Freeze").IsPrimaryKey(true).TextAlign(TextAlign.Left).Width(120).Add();
                            }))
            </div>
        </div>
    </div>
</div>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script id="Refresh" type="text/x-jsrender">
    <a href="#" class="e-toolbaricons refresh" />
</script>
<script id="AddNew" type="text/x-jsrender">
    <button class="btn btn-primary btn-sm add">Add Product</button>
</script>
<script type="text/javascript">
    $(document).ready(function () {
        var Message = '@TempData["Msg"]';
        if (Message != "")
            toastr.error(Message);

           var tanId = '@TempData["Temp"]';
       if (tanId != "" && tanId != undefined && tanId != null) {
           toastr.success(tanId);
        }

       });


</script>

<script type="text/javascript">
        function onToolBarClick(sender) {
            if (sender.itemName == "Expand")
                this.expandAll();
            else if (sender.itemName == "Collapse")
                this.collapseAll();
            else if (sender.itemName == "Refresh") {
                var instance = $("#Product").ejGrid("instance");
                instance._filterCollection = [];
                instance.clearFiltering();
                instance.clearSearching();
                this.refreshContent();
            }
            if (sender.itemName == "AddNew") {
                window.location.href = "../Product/Create";
            }
        }
        document.addEventListener('contextmenu', function (e) {
            e.preventDefault();
        });

    function DeleteEntry(ID) {

        var result = confirm("Are You Sure You Want to delete?");

        if (result == true) {
            debugger;
            $.ajax({
                url: '@Url.Action("Delete", "Product")',
                type: "GET",
                dataType: "JSON",
                data: { ProductID : ID },
                success: function (result1) {
                    try {
                        if (result1.Message === "success") {
                            alert("Entry Successfully Deleted...");
                            window.location.reload();
                        } else {
                            console.log("Server response: " + JSON.stringify(result1));
                        }
                    } catch (e) {
                        console.log("Error parsing server response: " + e);
                    }
                }
            });
        }
    }

</script>

