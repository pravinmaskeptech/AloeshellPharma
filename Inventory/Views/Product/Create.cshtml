@model Inventory.Models.ProductMaster
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .iframe-container {
        padding-bottom: 60%;
        padding-top: 30px;
        height: 0;
        overflow: hidden;
    }

        .iframe-container iframe,
        .iframe-container object,
        .iframe-container embed {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
</style>
<div class="row" style="background-color:white">
    <div class="col-lg-12 col-sm-12 col-xs-12">
        @using (Html.BeginForm("Create", "Product", FormMethod.Post, new
        {
        enctype = "multipart/form-data",
        @class = "form-horizontal",
        data_bv_message = "This value is not valid",
        data_toggle = "validator",
        data_bv_feedbackicons_valid = "glyphicon glyphicon-ok",
        data_bv_feedbackicons_invalid = "glyphicon glyphicon-remove",
        data_bv_feedbackicons_validating = "glyphicon glyphicon-refresh"
        }))
        {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <h4>Products</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.CategoryId)
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.EJ().Autocomplete("Category").WatermarkText("Select Category").Datasource((IEnumerable<Inventory.Models.Category>)ViewBag.CatDataSource).Width("100%").AutocompleteFields(field => field.Key("CategoryId").Text("CategoryName")).HighlightSearch(true).ShowPopupButton(true).ClientSideEvents(e => e.FocusOut("ChkCategory").Select("SetCategoryId"))

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Product Name is required and cannot be empty", maxlength = "250", onchange = "CheckDuplicateName();" } })
                                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
          
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <div class="col-md-6">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                <textarea id="Description" name="Description" class="input-validation-error form-control" cols="50" data-val="true" data-val-required="The Message field is required." placeholder="Description" rows="2" required data-bv-notempty-message="Description is required and cannot be empty" maxlength="500"></textarea>
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.HSNCode, htmlAttributes: new { @class = "control-label " })
                            </div>
                            <div class="col-md-6">
                                @Html.EJ().AutocompleteFor(model => model.HSNCode).Width("100%").WatermarkText("Select HSN Code").Datasource((IEnumerable<Inventory.Models.TaxMaster>)ViewBag.HsnDataSource).HighlightSearch(true).ShowPopupButton(true).MultiColumnSettings(obj => obj.Enable(true).Columns(obj1 => { obj1.Field("HSNCode").HeaderText("HSN Code").Add(); }).ShowHeader(true)).ClientSideEvents(e => e.Select("CheckHSN").FocusOut("CheckHSN"))
                                @Html.ValidationMessageFor(model => model.HSNCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>      
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" id="create" value="Create" class="btn btn-primary" onclick="CheckDuplicateName(); CheckHSN();" />
                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                </div>
            </div>
        </div>
        }
    </div>
</div>
<script>
   
    function CheckDuplicateName() {
        var Name = $('#ProductName').val();
        $.ajax({
            url: '@Url.Action("CheckDuplicateName", "Product")',
            type: "GET",
            dataType: "JSON",
            data: { Name: Name, Mode: "Create", Code: "0" },
            success: function (result) {
                try {
                    if (result == "1") {
                        var Code = result[0].ProductName;
                        if (Code != "" || Code != null) {
                            $('#ProductName').val('');
                            toastr.error("Product Name already exist");
                            $("#form0").bootstrapValidator('revalidateField', 'ProductName');
                        }
                    }
                    else if (result == "0") {

                    }
                    else {
                        toastr.error(result);
                    }
                }
                catch (e) {
                }
            }
        });
    }
    function CheckHSN() {
        
        var hsn = $('#HSNCode').val();
        
        if (hsn != "") {
            $.ajax({
                url: '@Url.Action("CheckHSN", "Product")',
                type: "GET",
                dataType: "JSON",
                data: { hsnCode: hsn },
                success: function (Gethsn) {
                    if (Gethsn.length == 0) {
                        toastr.error("HSN Code not Exist");
                        $("#HsnCode").css("border", "1px solid #e46f61");
                        $('#HsnCode').val('');
                        return false;
                        event.preventDefault();
                    } else {
                        $("#HsnCode").css("border", "1px solid #a5da6b");
                    }
                }
            });
        }
        else {
            toastr.error("please Enter HSN Code");
            $("#HsnCode").css("border", "1px solid #e46f61");
        }
    }

    function ChkCategory(id) {        
        var Category = $('#Category').val();     
        if (Category != "") {
            $.ajax({
                url: '@Url.Action("ChkCategory", "Product")',
                type: "GET",
                dataType: "JSON",
                data: { Cat: Category },
                success: function (result) {
                    if (result.length == 0) {
                        toastr.error("Category not Exist");
                        $("#Category").css("border", "1px solid #e46f61");
                        $('#Category').val('');
                        return false;
                        event.preventDefault();
                    } else {
                        $("#Category").css("border", "1px solid #a5da6b");
                    }
                }
            });
        }
        else {
            toastr.error("please Enter Category");
            $("#Category").css("border", "1px solid #e46f61");
        }
    }
    document.addEventListener('contextmenu', function (e) {
        e.preventDefault();
    });

    $(document).ready(function () {
        debugger;
        $("#form0").bootstrapValidator();
        
        var Message = '@TempData["Msg"]';
        if (Message != "")
            toastr.error(Message);
    })
    function SetCategoryId(id) {
        $('#CategoryId').val(id.key)
    };

</script>
